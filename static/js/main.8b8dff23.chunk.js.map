{"version":3,"sources":["waves.js","header.js","colors.js","lengthError.js","loader.js","form.js","wordsContainer.js","display.js","App.js","index.js"],"names":["StyledWave","styled","div","Wave","xmlns","viewBox","fill","fillOpacity","d","StyledHeader","header","Header","colors","StyledLengthError","vis","LengthError","setLengthError","onClick","e","className","StyledLoader","Loader","StyledForm","form","Form","setWords","setModalVis","useState","inputText","setInputText","lengthError","isLoading","setLoadStatus","handleSubmit","a","preventDefault","length","url","process","fetch","catch","err","console","error","res","json","data","onSubmit","type","value","onChange","target","StyledContainer","WordsContainer","words","Object","entries","map","key","vals","style","display","val","idx","Fragment","uniqid","Display","wordsVisibile","App","GlobalStyle","createGlobalStyle","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.8b8dff23.chunk.js","sourcesContent":["import styled from \"styled-components\";\n\nconst StyledWave = styled.div`\n  position: absolute;\n  width: 100%;\n`;\n\nexport default function Wave() {\n  return (\n    <StyledWave>\n      <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 1440 320\">\n        <path\n          fill=\"#faaba9\"\n          fillOpacity=\"1\"\n          d=\"M0,288L60,293.3C120,299,240,309,360,304C480,299,600,277,720,250.7C840,224,960,192,1080,192C1200,192,1320,224,1380,240L1440,256L1440,0L1380,0C1320,0,1200,0,1080,0C960,0,840,0,720,0C600,0,480,0,360,0C240,0,120,0,60,0L0,0Z\"\n        ></path>\n      </svg>\n    </StyledWave>\n  );\n}\n","import styled from \"styled-components\";\nimport Wave from \"./waves\";\n\nconst StyledHeader = styled.header`\n  position: absolute;\n  top: 0;\n  left: 0;\n  width: 100%;\n  padding-left: 20px;\n  padding-top: 20px;\n\n  h1 {\n    font-size: 3rem;\n  }\n\n  h3 {\n    font-size: 1.2rem;\n  }\n`;\n\nexport default function Header() {\n  return (\n    <>\n      <Wave />\n      <StyledHeader>\n        <h1>Scrambler</h1>\n        <h3>words within words</h3>\n      </StyledHeader>\n    </>\n  );\n}\n","export const colors = {\n  black: \"#1e2022\",\n  gray: \"#52616b\",\n  lightGray: \"#c9d6df\",\n  white: \"#f0f5f9\",\n  red: \"#faaba9\",\n};\n","import styled from \"styled-components\";\nimport { colors } from \"./colors\";\n\nconst StyledLengthError = styled.div`\n  display: ${({ vis }) => (vis ? \"flex\" : \"none\")};\n  position: absolute;\n  bottom: -75px;\n  padding: 10px;\n  border-radius: 18px;\n  background: ${colors.red};\n  max-width: 300px;\n  font-size: 0.9rem;\n  animation: appear 300ms ease;\n\n  & .arrow {\n    height: 20px;\n    width: 20px;\n    background: ${colors.red};\n    position: absolute;\n    top: -6px;\n    left: 18px;\n    transform: rotate(45deg);\n  }\n\n  @keyframes appear {\n    from {\n      bottom: -50px;\n      opacity: 0;\n      transform: scale(0.7);\n    }\n    top {\n      bottom: -75px;\n      opacity: 1;\n      transform: scale(1);\n    }\n  }\n`;\n\nexport default function LengthError({ vis, setLengthError }) {\n  const toggleError = (e) => {\n    setLengthError(false);\n  };\n\n  return (\n    <StyledLengthError vis={vis} onClick={toggleError}>\n      <p>\n        Please try a word less than 8 letters. Anything more takes a very long\n        time.\n      </p>\n      <div className=\"arrow\"></div>\n    </StyledLengthError>\n  );\n}\n","import styled from \"styled-components\";\nimport { colors } from \"./colors\";\n\nconst StyledLoader = styled.div`\n  display: ${({ vis }) => (vis ? \"flex\" : \"none\")};\n  align-items: center;\n  position: fixed;\n  top: calc(50% - 85px);\n  left: calc(50% - 150px);\n  height: 170px;\n  width: 300px;\n  background: ${colors.lightGray};\n  color: ${colors.black};\n  border: 50px solid ${colors.gray};\n  border-top-color: ${colors.red};\n  border-radius: 28px;\n  overflow: hidden;\n  animation: lights 1500ms ease infinite;\n\n  span {\n    display: inline-block;\n    height: 20px;\n    width: 20px;\n    border-radius: 50%;\n    background: ${colors.gray};\n    animation: goLeft 2000ms ease infinite;\n    margin-right: -15px;\n    position: absolute;\n    right: 0;\n  }\n\n  span:first-child {\n    animation-delay: 0;\n  }\n\n  span:nth-child(2) {\n    animation-delay: 500ms;\n  }\n\n  span:nth-child(3) {\n    animation-delay: 1000ms;\n  }\n\n  @keyframes goLeft {\n    0% {\n      right: 0;\n    }\n    25% {\n      transform: scale(2.5);\n    }\n    75% {\n      transform: scale(1);\n    }\n    100% {\n      right: 340px;\n      transform: scale(1);\n    }\n  }\n\n  @keyframes lights {\n    25% {\n      border-top-color: ${colors.red};\n      border-right-color: ${colors.gray};\n      border-bottom-color: ${colors.gray};\n      border-left-color: ${colors.gray};\n    }\n    50% {\n      border-top-color: ${colors.gray};\n      border-right-color: ${colors.red};\n      border-bottom-color: ${colors.gray};\n      border-left-color: ${colors.gray};\n    }\n    75% {\n      border-top-color: ${colors.gray};\n      border-right-color: ${colors.gray};\n      border-bottom-color: ${colors.red};\n      border-left-color: ${colors.gray};\n    }\n    100% {\n      border-top-color: ${colors.gray};\n      border-right-color: ${colors.gray};\n      border-bottom-color: ${colors.gray};\n      border-left-color: ${colors.red};\n    }\n  }\n`;\n\nexport default function Loader({ vis }) {\n  return (\n    <StyledLoader vis={vis}>\n      <span />\n      <span />\n      <span />\n    </StyledLoader>\n  );\n}\n","import styled from \"styled-components\";\nimport { useState } from \"react\";\nimport { colors } from \"./colors\";\nimport LengthError from \"./lengthError\";\nimport Loader from \"./loader\";\n\nconst StyledForm = styled.form`\n  height: 100vh;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  font-size: 1rem;\n\n  h2 {\n    margin-bottom: 8px;\n    margin-left: 3px;\n  }\n\n  .input-wrap {\n    position: relative;\n\n    .field-wrap {\n      display: flex;\n      align-items: center;\n    }\n  }\n\n  input {\n    padding: 13px 6px;\n    height: 50px;\n    border-style: none;\n    border: 1px solid ${colors.lightGray};\n    outline: none;\n\n    &:focus {\n      box-shadow: 0 0 1.5px ${colors.gray}, 0 0 2px ${colors.gray};\n    }\n  }\n\n  input[type=\"text\"] {\n    font-size: 1rem;\n    min-height: 50px;\n    width: 400px;\n    border-right: none;\n    border-top-left-radius: 8px;\n    border-bottom-left-radius: 8px;\n  }\n\n  input[type=\"submit\"] {\n    font-size: 16px;\n    padding-left: 25px;\n    padding-right: 25px;\n    border: 1px solid transparent;\n    border-left: none;\n    border-top-right-radius: 8px;\n    border-bottom-right-radius: 8px;\n    cursor: pointer;\n    background: ${colors.gray};\n    color: ${colors.white};\n\n    &:hover,\n    &:active {\n      filter: brightness(1.1);\n    }\n  }\n\n  @media (max-width: 540px) {\n    input[type=\"text\"] {\n      width: 230px;\n    }\n\n    input[type=\"submit\"] {\n      padding-left: 12px;\n      padding-right: 12px;\n    }\n  }\n`;\n\nexport default function Form({ setWords, setModalVis }) {\n  const [inputText, setInputText] = useState(\"\");\n  const [lengthError, setLengthError] = useState(false);\n  const [isLoading, setLoadStatus] = useState(false);\n\n  const handleInputChange = (e) => setInputText(e.target.value);\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n\n    if (!inputText) {\n      return;\n    } else if (inputText.length > 8) {\n      setLengthError(true);\n      return;\n    }\n\n    setLoadStatus(true);\n    setLengthError(false);\n\n    const url = process.env.REACT_APP_API_URL + \"?word=\" + inputText;\n    const res = await fetch(url).catch((err) => console.error(err));\n    const data = await res.json();\n\n    setWords(data);\n    setLoadStatus(false);\n    setModalVis(true);\n    setInputText(\"\");\n  };\n\n  return (\n    <>\n      <StyledForm onSubmit={handleSubmit}>\n        <div className=\"input-wrap\">\n          <h2>Type a word and get started!</h2>\n          <div className=\"field-wrap\">\n            <input type=\"text\" value={inputText} onChange={handleInputChange} />\n            <input type=\"submit\" value=\"Scramble!\" />\n          </div>\n          <LengthError vis={lengthError} setLengthError={setLengthError} />\n        </div>\n      </StyledForm>\n      <Loader vis={isLoading} />\n    </>\n  );\n}\n","import React from \"react\";\nimport styled from \"styled-components\";\nimport uniqid from \"uniqid\";\nimport { colors } from \"./colors\";\n\nconst StyledContainer = styled.div`\n  display: ${({ vis }) => (vis ? \"flex\" : \"none\")};\n  flex-direction: column;\n  position: absolute;\n  top: 0;\n  left: 0;\n  min-height: 100vh;\n  width: 100%;\n  background: ${colors.white};\n  animation: appear 200ms ease;\n  padding-bottom: 70px;\n\n  .btn-wrap {\n    position: fixed;\n    bottom: 0;\n    left: 0;\n    width: 100%;\n    background: ${colors.white};\n    padding: 20px 30px;\n    display: flex;\n    justify-content: flex-end;\n  }\n\n  button {\n    // position: fixed;\n    // bottom: 20px;\n    // right: 20px;\n    padding: 8px;\n    border-style: none;\n    border-radius: 8px;\n    background: ${colors.lightGray};\n    cursor: pointer;\n    font-size: 1.1rem;\n\n    &:hover,\n    &:active {\n      filter: brightness(1.05);\n    }\n  }\n\n  div.section-wrap {\n    padding: 10px 20px;\n    width: 100%;\n    flex-direction: column;\n    align-items: center;\n\n    h2 {\n      font-size: 2rem;\n    }\n\n    div {\n      font-size: 1.1rem;\n      max-width: 600px;\n      text-align: center;\n    }\n\n    &:last-child {\n      margin-bottom: 30px;\n    }\n  }\n\n  @keyframes appear {\n    from {\n      opacity: 0;\n    }\n  }\n\n  @media (min-width: 1080px) {\n    & {\n      padding-top: 70px;\n    }\n    .btn-wrap {\n      padding-top: 30px;\n      top: 0px;\n      left: 0px;\n      bottom: unset;\n      right: unset;\n      justify-content: flex-start;\n    }\n  }\n`;\n\nexport default function WordsContainer({ words, vis, setModalVis }) {\n  const mapWords = () =>\n    Object.entries(words).map(([key, vals]) => (\n      <div\n        className=\"section-wrap\"\n        key={uniqid()}\n        style={{ display: vals.length > 0 ? \"flex\" : \"none\" }}\n      >\n        <h2>{key}</h2>\n        <div>\n          {vals.map((val, idx) => (\n            <React.Fragment key={uniqid()}>\n              {idx === vals.length - 1 ? val : val + \", \"}\n            </React.Fragment>\n          ))}\n        </div>\n      </div>\n    ));\n  return (\n    <StyledContainer vis={vis}>\n      {mapWords()}\n      <div className=\"btn-wrap\">\n        <button onClick={() => setModalVis(false)}>\n          Scramble another word\n        </button>\n      </div>\n    </StyledContainer>\n  );\n}\n","import { useState } from \"react\";\nimport Form from \"./form\";\nimport WordsContainer from \"./wordsContainer\";\n\nexport default function Display() {\n  const [words, setWords] = useState({});\n  const [wordsVisibile, setModalVis] = useState(false);\n\n  return (\n    <>\n      <Form setWords={setWords} setModalVis={setModalVis} />\n      <WordsContainer\n        words={words}\n        vis={wordsVisibile}\n        setModalVis={setModalVis}\n      />\n    </>\n  );\n}\n","import Header from \"./header\";\nimport Display from \"./display\";\n\nfunction App() {\n  return (\n    <>\n      <Header />\n      <Display />\n    </>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport { createGlobalStyle } from \"styled-components\";\nimport { colors } from \"./colors\";\n\nconst GlobalStyle = createGlobalStyle`\n  *,\n  *::before,\n  *::after {\n    padding: 0;\n    margin: 0;\n    box-sizing: border-box;\n  }\n\n  body {\n    font-family: 'Oswald', Courier, sans-serif;\n    font-size: 16px;\n    background: ${colors.white};\n    color: ${colors.black};\n  }\n`;\n\nReactDOM.render(\n  <React.StrictMode>\n    <GlobalStyle />\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}